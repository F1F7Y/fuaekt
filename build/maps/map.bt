// 010 Binary template
// Just noting down how Id like this to be structured
// Yes, this is very simillar to the bsp format

struct Lump_t {
    int offset;
    int length;
}

struct Header_t {
    char ident[4];
    int version;
    int mapRevision;
    int padding;

    Lump_t lumps[16];
};

struct Plane_t {
    float a, b, c, d;
};

struct Vertex_t {
    float x, y, z;
}

struct VertexNormal {
    float x, y, z;
};

struct TextureData_t {
    int16_t index;
}

struct RenderVertex_t {
    int16_t vertexIdx;
    int16_t normalIdx;
    float uv[2];
}

struct TriangleIndex_t {
    int16_t idx;
};

struct Mesh_t {
    float mins[3];
    float maxs[3];
    int16_t firstTri;
    int16_t numTris;
    int16_t textureIdx;
};

struct BrushPlaneIndex_t {
    int16_t index;
};

struct Brush_t {
    float mins[3];
    float maxs[3];
    int16_t firstPlaneIdx;
    int16_t numPlaneIdxs;
}

struct Light_t {
    float origin[3];
    float colour[3];
    // int flags;
    // int direction;
}

// LUMP 0  - Unused
// LUMP 1  - Planes
// LUMP 2  - Vertices
// LUMP 3  - VertexNormals
// LUMP 4  - TextureNames
// LUMP 5  - TextureDatas
// LUMP 6  - RenderVertices
// LUMP 7  - TriangleIndices
// LUMP 8  - Meshes
// LUMP 9  - BrushPlaneIndices
// LUMP 10 - Brushes
// LUMP 11 - Unused
// LUMP 12 - Unused
// LUMP 13 - Unused
// LUMP 14 - Unused
// LUMP 15 - Lights